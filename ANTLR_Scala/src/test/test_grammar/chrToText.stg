group chrToText;

start(packdef, impdef, body) ::= <<
<!
<packdef>
!>
<impdef; separator=";">

<body>
>>

program(exps) ::= <<
//Program:
<exps; separator=".\n">
>>

impdef(solvname) ::= <<
use "<solvname>"
>>

constraintdeflist(cl) ::= <<
//Constraints definition
constraint <cl; separator=",">.
>>

constraintdef(name, arity) ::= "<name>/<arity>"

rule(name, head, body) ::= <<
<name:ruleName()><head> <"\<=>"> <body>.
>>

ruleName(name) ::= "<name> @ "

consList(consList) ::=<<
<consList; separator=",">
>>  

constraint(solv, name, termList) ::= "<solv:solverName()><name>(<termList; separator=\",\">)"

solverName(solv) ::= "<solv>."

binOp(op, term1, term2) ::= "<term1> <op> <term2>"

triOp(op, term1, term2, term3) ::= "<term1> is <term2><op><term3>"

letexpr(solvId, solvdef, program) ::= <<
let <solvId> = <solvdef>
in {
	<program>
}
>>

paramList(parList) ::= "<parList; separator=\",\">"

solvinstance(solvName, params) ::= "<solvName> <params>"

emptyList() ::= "[]"

list(termList) ::= "[<termList; separator=\",\">]"

simpleText(text) ::= "<text>"


