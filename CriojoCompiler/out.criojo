//file applicationServer
package application

import fr.emn.criojo.core.Converters._
import fr.emn.criojo.ext.expression.Relation.constructor.{OutChannel, LocalRelation, Channel}
import fr.emn.criojo.network.{ActorChamDebug, ActorCham, Firewall, BusManager}
import fr.emn.criojo.ext.expression.Relation.VarChannel
import fr.emn.criojo.ext.expression.ScalaString.VarScalaString


object criojoMain {
 	def main(args:Array[String]) {
		val busManager:BusManager = new BusManager()
		var firewall:Firewall = null 
		firewall = new Firewall {

			filterRules=List()
			var A:ActorCham = null
			A = new ActorCham("A", busManager) with ActorChamDebug {
			var test:LocalRelation = new LocalRelation("test")
			var cpt = VarScalaString("cpt")
			var alert:LocalRelation = new LocalRelation("alert")
			var BToKb:OutChannel = new OutChannel("B.Kb")
			var Ka:Channel = new Channel("Ka")
			rules(
				(test()) --> (BToKb(Ka))
				,(Ka(cpt)) --> (alert(cpt))
			)
		}

			var B:ActorCham = null
			B = new ActorCham("B", busManager) with ActorChamDebug {
			var cpt = VarScalaString("cpt")
			var Kb:Channel = new Channel("Kb")
			var Ka:VarChannel = VarChannel("Ka")
			rules(
				(Kb(Ka)) --> (Ka(cpt)&Kb(cpt))
			)
		}


			children = List(B,A)
		}
		firewall.sendFilterRules()


	}
}
